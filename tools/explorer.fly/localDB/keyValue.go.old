package localDB

import "fmt"

type KeyValueInfo struct {
	Data map[string]interface{} `json:"data"`
}

func NewKeyValueInfo() *KeyValueInfo {
	ret := new(KeyValueInfo)
	ret.Data = make(map[string]interface{})
	return ret
}

func (c *LocalDB) loadKeyValue() {
	keyValue := []KeyValueInfo{}
	c.configAct.GetConfigInfo("keyValue", &keyValue)
	fmt.Println("keyValue--load", keyValue)
	for _, v := range keyValue {
		if v.Data["key"] == nil {
			continue
		}
		fmt.Println("kkk", v.Data["key"])
		c.keyValue.Set(v.Data["key"], v.Data["value"])
	}
}
func (c *LocalDB) upKeyValue() {
	keyValue := []KeyValueInfo{}
	data := NewKeyValueInfo()
	for k, v := range c.keyValue.Hwnd() {
		data.Data["key"] = k
		data.Data["value"] = v
		keyValue = append(keyValue, *data)
	}
	c.configAct.SetConfigInfo("keyValue", keyValue)
}

func (c *LocalDB) SetKeyValue(k, v interface{}) {
	c.keyValue.Set(k, v)
	c.upKeyValue()
}

//key 最好不用 int  取值时有问题
func (c *LocalDB) GetKeyValue(k interface{}) {
	c.PrintKeyValue(k, c.keyValue.Get(k))
}

func (c *LocalDB) GetValue(k interface{}) interface{} {
	return c.keyValue.Get(k)
}
